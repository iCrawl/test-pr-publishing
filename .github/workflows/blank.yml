name: CI
on:
  issue_comment:
    types: [created]
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.issue.user.type == 'User' && startsWith(github.event.comment.body, '/pack this') && github.event.issue.pull_request
    steps:
      - name: Do the permission checking
        uses: actions/github-script@v4
        with:
          script: |
            try {
              const permissions = await github.repos.getCollaboratorPermissionLevel(
                context.repo({ username: user.login }),
              );
              const level = permissions.data.permission;
              if (level !== 'admin' && level !== 'write') {
                core.setFailed(`Permissions to run build for user ${context.payload.comment.user.login} denied.`)
              }
            } catch (error) {
              core.setFailed(`Request failed with ${error}`);
            }
      - name: Do the PR fetching
        uses: actions/github-script@v4
        id: get-pr
        with:
          script: |
            try {
              const pullRequest = await github.pulls.get({
                ...context.repo(),
                pull_number: context.payload.issue.number,
              });
              return pullRequest.data;
            } catch (error) {
              core.setFailed(`Request failed with ${error}`);
            }
      - name: Do the first comment thing
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              ...context.repo(),
              issue_number: context.payload.issue.number,
              body: `Hey @${context.payload.comment.user.login}, I've triggered a build for ${{ fromJSON(steps.get-pr.outputs.result).head.sha }}.`,
            })
      - name: Do the checkout thing
        uses: actions/checkout@v2
        with:
          ref: ${{ fromJSON(steps.get-pr.outputs.result).merge_commit_sha }}
      - name: Do the second comment thing
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              ...context.repo(),
              issue_number: context.payload.issue.number,
              body: `Hey @${context.payload.comment.user.login}, I've packed this into an installable tgz. You can install it for testing by referencing it in your package.json like so:
              \`\`\`
              {
                  "depdendecies": {
                      "discord.js": ""
                  }
              }
              \`\`\`
              and then running \`npm install\`, or via \`npm i ""\`.
              `,
            })
