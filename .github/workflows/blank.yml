name: CI
on:
  issue_comment:
    types: [created]
jobs:
  check_permissions:
    name: Check permissions
    runs-on: ubuntu-latest
    if: github.event.issue.user.type == 'User' && startsWith(github.event.comment.body, '/pack this') && github.event.issue.pull_request
    outputs:
      permission: ${{ steps.permission.outputs.result }}
    steps:
      - name: Do the permission checking
        uses: actions/github-script@v4
        id: permission
        with:
          script: |
            try {
              const permissions = await github.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.payload.comment.user.login,
              });
              const level = permissions.data.permission;
              return level !== 'admin' && level !== 'write';
            } catch (error) {
              core.setFailed(`Request failed with ${error}`);
            }
  
  fetch_pr:
    name: Fetch pull request
    runs-on: ubuntu-latest
    needs: check_permissions
    if: ${{ !fromJSON(needs.check_permissions.permission.outputs.result) }}
    outputs:
      get-pr: ${{ steps.get-pr.outputs.result }}
    steps:
      - name: Do the PR fetching
        uses: actions/github-script@v4
        id: get-pr
        with:
          script: |
            try {
              const pullRequest = await github.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.issue.number,
              });
              return pullRequest.data;
            } catch (error) {
              core.setFailed(`Request failed with ${error}`);
            }
            
  build_comment:
    name: Post build start comment
    runs-on: ubuntu-latest
    needs: fetch_pr
    steps:
      - name: Do the first comment thing
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `Hey @${context.payload.comment.user.login}, I've triggered a build for ${{ fromJSON(needs.fetch_pr.get-pr.outputs.result).head.sha }}.`,
            })
            
  pack:
    name: Pack package
    runs-on: ubuntu-latest
    needs: [fetch_pr, build_comment]
    steps:
      - name: Do the checkout thing
        uses: actions/checkout@v2
        with:
          ref: ${{ fromJSON(needs.fetch_pr.get-pr.outputs.result).merge_commit_sha }}
          
  done_comment:
    name: Post success comment
    runs-on: ubuntu-latest
    needs: pack
    steps:
      - name: Do the second comment thing
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `Hey @${context.payload.comment.user.login}, I've packed this into an installable tgz. You can install it for testing by referencing it in your package.json like so:
              \`\`\`
              {
                  "depdendencies": {
                      "discord.js": ""
                  }
              }
              \`\`\`
              and then running \`npm install\`, or via \`npm i ""\`.
              `,
            })
